/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";var P=Object.defineProperty;var H=Object.getOwnPropertyDescriptor;var X=Object.getOwnPropertyNames;var Y=Object.prototype.hasOwnProperty;var A=(w,t)=>{for(var e in t)P(w,e,{get:t[e],enumerable:!0})},q=(w,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of X(t))!Y.call(w,n)&&n!==e&&P(w,n,{get:()=>t[n],enumerable:!(s=H(t,n))||s.enumerable});return w};var O=w=>q(P({},"__esModule",{value:!0}),w);var R={};A(R,{default:()=>k});module.exports=O(R);var f=require("obsidian");var E=`
    <style>
        :root {
            --toolbar-height: 60px;
            --toolbar-bg: #f0f0f0;
        }

        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            touch-action: none;
            -webkit-user-select: none;
            user-select: none;
        }

        .drawing-container {
            position: relative;
            width: 100%;
            height: 500px;
            resize: vertical;
            overflow: hidden;
        }

        #canvas-container {
            position: absolute;
            top: var(--toolbar-height);
            left: 0;
            right: 0;
            bottom: 0;
            background-color: transparent;
        }

        #drawing-canvas {
            width: 100%;
            height: 100%;
            touch-action: none;
        }

        #toolbar {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: var(--toolbar-height);
            background: var(--background-secondary);
            display: flex;
            align-items: center;
            padding: 0 1rem;
            gap: 1rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            z-index: 1;
        }

        .tool-group {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .color-picker {
            width: 40px;
            height: 40px;
            border: none;
            padding: 0;
            border-radius: 50%;
            cursor: pointer;
            margin-right: 10px;
        }

        .brush-size {
            width: 100px;
        }

        .tool-button {
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 32px;
            width: 32px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .tool-button.active {

        }

        .tool-button[data-size="small"] {
            font-size: 12px;
        }
        
        .tool-button[data-size="medium"] {
            font-size: 12px;
        }
        
        .tool-button[data-size="large"] {
            font-size: 14px;
        }

        .grid-pattern {
            position: relative;
        }

        .grid-pattern::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
            background-image: 
                linear-gradient(to right, var(--divider-color) 1px, transparent 1px),
                linear-gradient(to bottom, var(--divider-color) 1px, transparent 1px);
            background-size: var(--grid-size, 20px) var(--grid-size, 20px);
            background-position: var(--grid-offset-x, 0px) var(--grid-offset-y, 0px);
            background-attachment: local;
            will-change: transform;
        }

        #eraser-preview {
            position: fixed;
            pointer-events: none;
            border: 2px solid var(--text-normal);
            border-radius: 50%;
            display: none;
            z-index: 2;
        }
    </style>

    <div class="toolbar">
        <div class="tool-group">
            <button class="tool-button active" data-tool="pen"><svg xmlns="http://www.w3.org/2000/svg"width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pen"><path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"/></svg></button>
            <button class="tool-button" data-tool="eraser"><svg xmlns="http://www.w3.org/2000/svg"width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-eraser"><path d="m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21"/><path d="M22 21H7"/><path d="m5 11 9 9"/></svg></button>
            <!-- <button class="tool-button" data-tool="rectangle"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"/></svg></button> -->
        </div>
        <div class="tool-group">
            <input type="color" class="color-picker" value="#000000">
            <button class="tool-button active" data-size="small">\u2022</button>
            <button class="tool-button" data-size="medium">\u25CF</button>
            <button class="tool-button" data-size="large">\u2B24</button>
        </div>
        <div class="tool-group">
            <button class="tool-button grid-toggle"><svg xmlns="http://www.w3.org/2000/svg"width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-grid-3x3"><rect width="18" height="18" x="3" y="3" rx="2"/><path d="M3 9h18"/><path d="M3 15h18"/><path d="M9 3v18"/><path d="M15 3v18"/></svg></button>
            <button class="tool-button clear"><svg xmlns="http://www.w3.org/2000/svg"width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/></svg></button>
            <button class="tool-button undo"><svg xmlns="http://www.w3.org/2000/svg"width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-undo"><path d="M3 7v6h6"/><path d="M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13"/></svg></button>
            <button class="tool-button redo"><svg xmlns="http://www.w3.org/2000/svg"width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-redo-2"><path d="m15 14 5-5-5-5"/><path d="M20 9H9.5A5.5 5.5 0 0 0 4 14.5A5.5 5.5 0 0 0 9.5 20H13"/></svg></button>
        </div>
    </div>
    <div class="canvas-container">
        <canvas class="drawing-canvas"></canvas>
    </div>
    <div class="eraser-preview"></div>

`;var S=class{constructor(t,e,s){this.isEditMode=!1;this.containerHeight=500;this.initColors=t,this.drawingId=e,this.container=s,this.canvas=this.container.querySelector(".drawing-canvas"),console.log("canvas created",this.canvas),this.ctx=this.canvas.getContext("2d",{desynchronized:!0,alpha:!0}),console.log("starting drawing app"),this.offscreenCanvas=new OffscreenCanvas(100,100),console.log("offscreen canvas created",this.offscreenCanvas),this.offscreenCtx=this.offscreenCanvas.getContext("2d",{desynchronized:!0,alpha:!0}),this.isDrawing=!1,this.currentTool="pen",this.color=this.initColors.textColor,this.brushSizes={small:2,medium:4,large:8},this.brushSize=this.brushSizes.small,this.points=[],this.strokes=[],this.redoStrokes=[],this.currentStroke=null,this.lastDrawTime=0,this.lastPoint=null,this.velocity=0,this.lastStrokeTime=0,this.strokeBuffer=[],this.strokeTimeout=20,this.proximityThreshold=10,this.dpr=window.devicePixelRatio||1,this.smoothingFactor=.3,this.minDistance=.5*this.dpr,this.maxDistance=40*this.dpr,this.minPressureThreshold=.03,this.drawQueue=[],this.strokes=[],this.redoStrokes=[],this.currentStroke=null,this.lastTapTime=0,this.tapCount=0,this.twoFingerTapDelay=300,this.showGrid=!0,this.viewportX=0,this.viewportY=0,this.isPanning=!1,this.lastPanPoint=null,this.touchPoints=new Map,this.scale=1,this.initialDistance=0,this.initialScale=1,this.minScale=.5,this.maxScale=5,this.isPanning=!1,this.isZooming=!1,this.initialDistance=0,this.initialScale=1,this.minScale=.5,this.maxScale=5,this.gestureStarted=!1,this.zoomCenterX=0,this.zoomCenterY=0,this.canvas.style.position="absolute",this.canvas.style.top="0",this.canvas.style.left="0",this.canvas.style.zIndex="0",this.eraserSizes={small:20,medium:40,large:60},this.eraserPreview=this.container.querySelector(".eraser-preview"),this.eraserPreview.style.borderColor=this.initColors.textColor,this.activeCanvas=new OffscreenCanvas(100,100),this.activeCtx=this.activeCanvas.getContext("2d",{desynchronized:!0,alpha:!0}),this.shapes=[],this.selectedShape=null,this.isDrawingShape=!1,this.shapeStartPoint=null,this.resizeHandleSize=8,this.activeHandle=null,this.initCanvas(),this.initEvents(),this.strokes.push({points:[],tool:this.currentTool,color:this.color,brushSize:this.brushSize}),this.startDrawLoop(),this.initGrid();let n=this.container.querySelector("#undo"),o=this.container.querySelector("#redo");n==null||n.addEventListener("click",()=>this.undo()),o==null||o.addEventListener("click",()=>this.redo())}initCanvas(){let t=()=>{let n=this.container.querySelector(".canvas-container"),o=window.devicePixelRatio||1;this.dpr=o;let r=window.getComputedStyle(n),i=parseInt(r.width),a=parseInt(r.height);this.canvas.width=i*o,this.canvas.height=a*o,this.canvas.style.width=i+"px",this.canvas.style.height=a+"px",this.gridCanvas&&(this.gridCanvas.width=this.canvas.width,this.gridCanvas.height=this.canvas.height,this.gridCanvas.style.width=this.canvas.style.width,this.gridCanvas.style.height=this.canvas.style.height),this.offscreenCanvas.width=this.canvas.width,this.offscreenCanvas.height=this.canvas.height,this.redrawCanvas()};this.canvas.style.touchAction="none",this.canvas.addEventListener("touchstart",n=>n.preventDefault(),{passive:!1});let e=new ResizeObserver(()=>{t()}),s=this.container.querySelector(".canvas-container");e.observe(s),t(),window.addEventListener("resize",t)}initEvents(){let t=this.container.querySelectorAll(".tool-button[data-tool]");t==null||t.forEach(i=>{i.addEventListener("click",a=>{let h=this.container.querySelector(".tool-button.active");if(h==null||h.classList.remove("active"),i.classList.add("active"),this.currentTool=i.dataset.tool||"pen",this.eraserPreview&&(this.eraserPreview.style.display="none"),this.currentTool==="eraser"){this.container.querySelectorAll(".tool-button[data-size]").forEach(d=>d.classList.remove("active"));let c=this.container.querySelector('.tool-button[data-size="large"]');c==null||c.classList.add("active"),this.brushSize=this.eraserSizes.large,this.updateEraserPreview()}else{this.container.querySelectorAll(".tool-button[data-size]").forEach(d=>d.classList.remove("active"));let c=this.container.querySelector('.tool-button[data-size="small"]');c==null||c.classList.add("active"),this.brushSize=this.brushSizes.small}})});let e=this.container.querySelector(".color-picker");e==null||e.addEventListener("input",i=>{this.color=i.target.value});let s=this.container.querySelectorAll(".tool-button[data-size]");s==null||s.forEach(i=>{i.addEventListener("click",()=>{s.forEach(h=>h.classList.remove("active")),i.classList.add("active");let a=i.dataset.size;this.brushSize=this.currentTool==="eraser"?this.eraserSizes[a]:this.brushSizes[a],this.currentTool==="eraser"&&this.updateEraserPreview()})});let n=this.container.querySelector(".clear"),o=this.container.querySelector(".undo"),r=this.container.querySelector(".redo");n==null||n.addEventListener("click",()=>this.clearCanvas()),o==null||o.addEventListener("click",()=>this.undo()),r==null||r.addEventListener("click",()=>this.redo()),this.canvas&&(this.canvas.addEventListener("pointermove",this.draw.bind(this)),this.canvas.addEventListener("pointerdown",this.startDrawing.bind(this)),this.canvas.addEventListener("pointerup",this.endDrawing.bind(this)),this.canvas.addEventListener("pointerout",this.endDrawing.bind(this))),this.canvas.addEventListener("touchstart",i=>{if(i.touches.length===2){i.preventDefault();let a=performance.now();a-this.lastTapTime<this.twoFingerTapDelay&&this.undo(),this.lastTapTime=a}},{passive:!1}),this.canvas.addEventListener("touchmove",i=>{i.touches.length===2&&i.preventDefault()},{passive:!1}),this.canvas.addEventListener("touchend",i=>{i.touches.length===0&&i.changedTouches.length===2&&i.preventDefault()},{passive:!1}),this.canvas.addEventListener("touchstart",i=>{if(i.touches.length===2&&(i.preventDefault(),this.isDrawing=!1,!this.gestureStarted)){let a=this.getDistance(i.touches[0],i.touches[1]);this.initialDistance=a,this.initialScale=this.scale,this.lastPanPoint={x:(i.touches[0].clientX+i.touches[1].clientX)/2,y:(i.touches[0].clientY+i.touches[1].clientY)/2}}},{passive:!1}),this.canvas.addEventListener("touchmove",i=>{if(i.touches.length===2){i.preventDefault();let a={x:(i.touches[0].clientX+i.touches[1].clientX)/2,y:(i.touches[0].clientY+i.touches[1].clientY)/2};if(!this.gestureStarted){let h=this.getDistance(i.touches[0],i.touches[1]),l=Math.abs(h-this.initialDistance),c=Math.abs(a.x-this.lastPanPoint.x)+Math.abs(a.y-this.lastPanPoint.y);if(l>18)this.isZooming=!0,this.initialDistance=h,this.initialScale=this.scale;else if(c>8)this.isPanning=!0;else return;this.gestureStarted=!0}if(this.isZooming){let l=this.getDistance(i.touches[0],i.touches[1])/this.initialDistance*this.initialScale;l=Math.min(Math.max(l,this.minScale),this.maxScale);let c=this.canvas.getBoundingClientRect(),d=(a.x-c.left)*this.dpr,x=(a.y-c.top)*this.dpr,b=(d+this.viewportX)/this.scale,C=(x+this.viewportY)/this.scale;this.scale=l,this.viewportX=b*this.scale-d,this.viewportY=C*this.scale-x}else if(this.isPanning){if(this.lastPanPoint){let h=(a.x-this.lastPanPoint.x)*this.dpr,l=(a.y-this.lastPanPoint.y)*this.dpr;this.viewportX-=h,this.viewportY-=l}this.lastPanPoint=a}this.updateGridTransform(),this.redrawCanvas()}},{passive:!1}),this.canvas.addEventListener("touchend",i=>{i.touches.length===0&&(this.isPanning=!1,this.isZooming=!1,this.gestureStarted=!1,this.lastPanPoint=null,this.initialDistance=0,this.zoomCenterX=0,this.zoomCenterY=0)}),this.canvas.addEventListener("pointermove",i=>{if(this.currentTool==="eraser"){let a=this.brushSize/this.dpr,h=this.canvas.getBoundingClientRect(),l=60,c=i.clientX-h.left,d=i.clientY-h.top+l;this.eraserPreview.style.display="block",this.eraserPreview.style.width=a+"px",this.eraserPreview.style.height=a+"px",this.eraserPreview.style.zIndex="9999",this.eraserPreview.style.position="absolute",this.eraserPreview.style.left=c-a/2+"px",this.eraserPreview.style.top=d-a/2+"px",this.eraserPreview.style.backgroundColor="rgba(255, 255, 255, 0.2)",this.eraserPreview.style.border=`2px solid ${this.initColors.textColor}`,this.eraserPreview.style.borderRadius="50%"}}),this.canvas.addEventListener("pointerleave",i=>{this.eraserPreview.style.display="none"}),this.canvas.addEventListener("pointerdown",i=>{if(this.currentTool==="rectangle"){let a={x:(i.offsetX*this.dpr+this.viewportX)/this.scale,y:(i.offsetY*this.dpr+this.viewportY)/this.scale};if(this.lastPoint=a,this.selectedShape&&(this.checkResizeHandles(a),this.activeHandle)){i.preventDefault();return}let h=this.getShapeAtPoint(a);h?(this.selectedShape=h,this.checkResizeHandles(a)):(this.isDrawingShape=!0,this.shapeStartPoint=a,this.selectedShape=null)}}),this.canvas.addEventListener("pointermove",i=>{if(this.currentTool==="rectangle"){let a={x:(i.offsetX*this.dpr+this.viewportX)/this.scale,y:(i.offsetY*this.dpr+this.viewportY)/this.scale};if(this.lastPoint=a,this.isDrawingShape&&this.shapeStartPoint){this.redrawCanvas();let h=a.x-this.shapeStartPoint.x,l=a.y-this.shapeStartPoint.y,c={x:h<0?a.x:this.shapeStartPoint.x,y:l<0?a.y:this.shapeStartPoint.y,width:Math.abs(h),height:Math.abs(l),color:this.color};this.drawShape(c)}else this.selectedShape&&this.activeHandle&&(this.resizeShape(this.selectedShape,this.activeHandle,a),this.redrawCanvas())}}),this.canvas.addEventListener("pointerup",i=>{if(this.currentTool==="rectangle"&&this.isDrawingShape){if(this.isDrawingShape=!1,this.shapeStartPoint&&this.lastPoint){let a=this.lastPoint.x-this.shapeStartPoint.x,h=this.lastPoint.y-this.shapeStartPoint.y,l={type:"rectangle",x:a<0?this.lastPoint.x:this.shapeStartPoint.x,y:h<0?this.lastPoint.y:this.shapeStartPoint.y,width:Math.abs(a),height:Math.abs(h),color:this.color};this.shapes.push(l),this.selectedShape=l,this.redrawCanvas()}this.shapeStartPoint=null}this.activeHandle=null})}startDrawing(t){if(t.pointerType!=="touch"&&!(t.pointerType==="mouse"&&t.button!==0)&&(this.currentTool==="pen"||this.currentTool==="eraser")&&(this.isDrawing=!0,this.currentStroke={points:[],tool:this.currentTool,color:this.color,brushSize:this.brushSize},this.currentTool==="eraser")){let e={x:(t.offsetX*this.dpr+this.viewportX)/this.scale,y:(t.offsetY*this.dpr+this.viewportY)/this.scale,pressure:t.pressure||1,time:performance.now()};this.currentStroke.points.push(e),this.lastPoint=e}}draw(t){if(!this.isDrawing||this.isPanning)return;let e={x:(t.offsetX*this.dpr+this.viewportX)/this.scale,y:(t.offsetY*this.dpr+this.viewportY)/this.scale,pressure:t.pressure||1,time:performance.now()};if(this.currentStroke&&(this.lastPoint&&(e.x=this.lastPoint.x+(e.x-this.lastPoint.x)*this.smoothingFactor,e.y=this.lastPoint.y+(e.y-this.lastPoint.y)*this.smoothingFactor),this.currentStroke.points.push(e),this.currentStroke.points.length>=2)){let s=this.currentStroke.points,n=s[s.length-2],o=s[s.length-1];if(this.ctx.save(),this.ctx.translate(-this.viewportX,-this.viewportY),this.ctx.scale(this.scale,this.scale),this.currentTool==="eraser")this.eraseArea(n,o,this.brushSize/2);else{this.ctx.beginPath(),this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.globalCompositeOperation="source-over",this.ctx.strokeStyle=this.color;let r=this.brushSize*.6,i=this.brushSize*1.2,a=o.pressure;this.ctx.lineWidth=r+i*a,this.ctx.moveTo(n.x,n.y),this.ctx.lineTo(o.x,o.y),this.ctx.stroke()}this.ctx.restore()}this.lastPoint=e}endDrawing(){if(this.currentTool==="pen"||this.currentTool==="eraser"){if(!this.isDrawing)return;this.currentStroke&&this.currentStroke.points.length>0&&(this.strokes.push(this.currentStroke),this.redoStrokes=[]),this.isDrawing=!1,this.currentStroke=null,this.lastPoint=null}}clearCanvas(){this.ctx.fillStyle=this.initColors.backgroundPrimary,this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height),this.strokes=[],this.redoStrokes=[]}redrawCanvas(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.save(),this.ctx.translate(-this.viewportX,-this.viewportY),this.ctx.scale(this.scale,this.scale),this.ctx.globalCompositeOperation="source-over";for(let t of this.strokes)t&&t.points&&t.points.length>0&&this.drawStroke(t);this.ctx.restore(),this.updateGridTransform()}calculateVelocity(t){if(!this.lastPoint||!this.lastDrawTime)return this.lastPoint=t,this.lastDrawTime=performance.now(),0;let e=t.x-this.lastPoint.x,s=t.y-this.lastPoint.y,n=Math.sqrt(e*e+s*s),o=performance.now()-this.lastDrawTime;return this.lastDrawTime=performance.now(),n/o}drawStroke(t){if(!t||!Array.isArray(t.points)||t.points.length===0)return;let e=this.ctx;if(t.tool==="eraser"?(e.globalCompositeOperation="source-over",e.fillStyle=this.initColors.backgroundPrimary,e.strokeStyle=this.initColors.backgroundPrimary):(e.globalCompositeOperation="source-over",e.strokeStyle=t.color),e.lineCap="round",e.lineJoin="round",t.points.length===1){let s=t.points[0];e.beginPath(),e.arc(s.x,s.y,t.brushSize/2,0,Math.PI*2),t.tool==="eraser"?e.fill():e.stroke()}else{e.beginPath(),e.moveTo(t.points[0].x,t.points[0].y);for(let s=1;s<t.points.length;s++){let n=t.points[s],o=t.brushSize*.6,r=t.brushSize*1.2,i=n.pressure||1;e.lineWidth=o+r*i,e.lineTo(n.x,n.y),e.stroke(),e.beginPath(),e.moveTo(n.x,n.y)}}}startDrawLoop(){let t=()=>{requestAnimationFrame(t)};requestAnimationFrame(t)}initGrid(){let t=this.container.querySelector(".grid-toggle"),e=this.container.querySelector(".canvas-container");this.gridCanvas=document.createElement("canvas"),this.gridCanvas.style.position="absolute",this.gridCanvas.style.top="0",this.gridCanvas.style.left="0",this.gridCanvas.style.pointerEvents="none",this.gridCanvas.style.zIndex="0",e.appendChild(this.gridCanvas),this.gridCtx=this.gridCanvas.getContext("2d",{alpha:!0}),this.canvas.style.position="absolute",this.canvas.style.zIndex="1",this.canvas.style.backgroundColor="transparent",this.gridCanvas.width=this.canvas.width,this.gridCanvas.height=this.canvas.height,this.gridCanvas.style.width=this.canvas.style.width,this.gridCanvas.style.height=this.canvas.style.height,this.showGrid=!0,t.classList.add("active"),t.addEventListener("click",()=>{this.showGrid=!this.showGrid,t.classList.toggle("active"),this.updateGridTransform()}),this.updateGridTransform()}updateGridTransform(){if(!this.showGrid||!this.gridCtx)return;this.gridCtx.clearRect(0,0,this.gridCanvas.width,this.gridCanvas.height),this.gridCtx.save(),this.gridCtx.translate(-this.viewportX,-this.viewportY),this.gridCtx.scale(this.scale,this.scale);let t=40,e=this.gridCanvas.width/this.scale+t,s=this.gridCanvas.height/this.scale+t;this.gridCtx.beginPath(),this.gridCtx.strokeStyle=this.initColors.dividerColor,this.gridCtx.lineWidth=1/this.scale;let n=Math.floor(this.viewportX/(t*this.scale))*t,o=Math.floor(this.viewportY/(t*this.scale))*t;for(let r=n;r<=n+e;r+=t)this.gridCtx.moveTo(r,o),this.gridCtx.lineTo(r,o+s);for(let r=o;r<=o+s;r+=t)this.gridCtx.moveTo(n,r),this.gridCtx.lineTo(n+e,r);this.gridCtx.stroke(),this.gridCtx.restore()}initPanning(){this.canvas.addEventListener("touchstart",t=>{t.preventDefault(),Array.from(t.touches).forEach(e=>{this.touchPoints.set(e.identifier,{x:e.clientX,y:e.clientY})}),t.touches.length===2&&(this.isPanning=!0,this.isDrawing=!1,this.lastPanPoint=this.getMidpoint(t.touches[0],t.touches[1]))},{passive:!1}),this.canvas.addEventListener("touchmove",t=>{if(t.preventDefault(),this.isPanning&&t.touches.length===2){let e=this.getMidpoint(t.touches[0],t.touches[1]);if(this.lastPanPoint){let s=e.x-this.lastPanPoint.x,n=e.y-this.lastPanPoint.y;this.viewportX+=s,this.viewportY+=n,this.redrawCanvas()}this.lastPanPoint=e}},{passive:!1}),this.canvas.addEventListener("touchend",t=>{Array.from(t.changedTouches).forEach(e=>{this.touchPoints.delete(e.identifier)}),t.touches.length<2&&(this.isPanning=!1,this.lastPanPoint=null)})}getMidpoint(t,e){return{x:(t.clientX+e.clientX)/2,y:(t.clientY+e.clientY)/2}}getDistance(t,e){let s=t.clientX-e.clientX,n=t.clientY-e.clientY;return Math.sqrt(s*s+n*n)}updateEraserPreview(){let t=this.brushSize/this.dpr;this.eraserPreview.style.width=t+"px",this.eraserPreview.style.height=t+"px",this.eraserPreview.style.transform="none",this.eraserPreview.style.zIndex="9999",this.eraserPreview.style.position="absolute",this.eraserPreview.style.backgroundColor="rgba(255, 255, 255, 0.2)",this.eraserPreview.style.border=`2px solid ${this.initColors.textColor}`,this.eraserPreview.style.borderRadius="50%"}eraseArea(t,e,s){this.ctx.save(),this.ctx.globalCompositeOperation="destination-out",this.ctx.translate(-this.viewportX,-this.viewportY),this.ctx.scale(this.scale,this.scale),this.ctx.beginPath(),this.ctx.lineCap="round",this.ctx.lineWidth=s*2,this.ctx.moveTo(t.x,t.y),this.ctx.lineTo(e.x,e.y),this.ctx.stroke(),this.ctx.restore();for(let n=this.strokes.length-1;n>=0;n--){let o=this.strokes[n];if(!o||!o.points||o.points.length===0)continue;let r=!1;for(let i=0;i<o.points.length-1;i++){let a=o.points[i],h=o.points[i+1];if(this.lineSegmentDistance(a,h,t,e)<s){r=!0;break}}r&&this.strokes.splice(n,1)}this.redrawCanvas()}strokeIntersectsEraser(t,e,s,n){if(!t.points)return!1;for(let o=0;o<t.points.length;o++){let r=t.points[o];if(this.pointToLineDistance(r,e,s)<n)return!0}return!1}splitStroke(t,e,s,n){let o=[],r={points:[],tool:t.tool,color:t.color,brushSize:t.brushSize};for(let i of t.points)this.pointToLineDistance(i,e,s)>n?(r.points.length,r.points.push(i)):r.points.length>0&&(o.push(r),r={points:[],tool:t.tool,color:t.color,brushSize:t.brushSize});return r.points.length>0&&o.push(r),o}pointToLineDistance(t,e,s){let n=t.x-e.x,o=t.y-e.y,r=s.x-e.x,i=s.y-e.y,a=n*r+o*i,h=r*r+i*i,l=-1;h!==0&&(l=a/h);let c,d;l<0?(c=e.x,d=e.y):l>1?(c=s.x,d=s.y):(c=e.x+l*r,d=e.y+l*i);let x=t.x-c,b=t.y-d;return Math.sqrt(x*x+b*b)}lineSegmentDistance(t,e,s,n){let o=[this.pointToLineDistance(t,s,n),this.pointToLineDistance(e,s,n),this.pointToLineDistance(s,t,e),this.pointToLineDistance(n,t,e)];return Math.min(...o)}drawShape(t){this.ctx.save(),this.ctx.strokeStyle=t.color,this.ctx.lineWidth=2/this.scale,this.ctx.strokeRect(t.x,t.y,t.width,t.height),this.ctx.restore()}drawSelectionHandles(t){let e=this.getResizeHandles(t);this.ctx.save(),this.ctx.fillStyle="#ffffff",this.ctx.strokeStyle="#000000",this.ctx.lineWidth=1/this.scale,e.forEach(s=>{this.ctx.beginPath();let n=this.resizeHandleSize*1.5/this.scale;this.ctx.rect(s.x-n/2,s.y-n/2,n,n),this.ctx.fill(),this.ctx.stroke()}),this.ctx.restore()}getResizeHandles(t){return[{x:t.x,y:t.y,cursor:"nw-resize",position:"nw"},{x:t.x+t.width,y:t.y,cursor:"ne-resize",position:"ne"},{x:t.x,y:t.y+t.height,cursor:"sw-resize",position:"sw"},{x:t.x+t.width,y:t.y+t.height,cursor:"se-resize",position:"se"}]}getShapeAtPoint(t){return this.shapes.find(e=>t.x>=e.x&&t.x<=e.x+e.width&&t.y>=e.y&&t.y<=e.y+e.height)}checkResizeHandles(t){if(!this.selectedShape)return null;let e=this.getResizeHandles(this.selectedShape);for(let s of e)if(this.pointInHandle(t,s)){this.activeHandle=s.position;return}this.activeHandle=null}pointInHandle(t,e){let s=this.resizeHandleSize*2/this.scale;return t.x>=e.x-s&&t.x<=e.x+s&&t.y>=e.y-s&&t.y<=e.y+s}resizeShape(t,e,s){let n=t.x,o=t.y,r=t.width,i=t.height;switch(e){case"nw":t.width=r+(n-s.x),t.height=i+(o-s.y),t.x=s.x,t.y=s.y;break;case"ne":t.width=s.x-t.x,t.height=i+(o-s.y),t.y=s.y;break;case"sw":t.width=r+(n-s.x),t.height=s.y-t.y,t.x=s.x;break;case"se":t.width=s.x-t.x,t.height=s.y-t.y;break}}loadFromData(t){if(t)try{let e=JSON.parse(t);if(Array.isArray(e.strokes)?this.strokes=e.strokes.filter(s=>s&&Array.isArray(s.points)&&s.points.every(n=>n&&typeof n.x=="number"&&typeof n.y=="number")):this.strokes=[],this.shapes=Array.isArray(e.shapes)?e.shapes:[],this.redoStrokes=Array.isArray(e.redoStrokes)?e.redoStrokes:[],typeof e.containerHeight=="number"){this.containerHeight=e.containerHeight;let s=this.container.closest(".drawing-container");s&&(s.style.height=`${this.containerHeight}px`)}this.redrawCanvas()}catch(e){console.error("Failed to parse drawing data:",e),this.strokes=[],this.shapes=[],this.redoStrokes=[]}}getDrawingData(){return JSON.stringify({strokes:this.strokes,shapes:this.shapes,redoStrokes:this.redoStrokes,containerHeight:this.containerHeight})}setEditMode(t){this.isEditMode=t,this.canvas.style.pointerEvents=t?"auto":"none",this.canvas.style.cursor=t?"crosshair":"default"}handlePointerDown(t){this.isEditMode}handlePointerMove(t){this.isEditMode}handlePointerUp(t){this.isEditMode}updateContainerHeight(t){this.containerHeight=t}undo(){if(this.strokes.length>0){let t=this.strokes.pop();t&&(this.redoStrokes.push(t),this.redrawCanvas())}}redo(){if(this.redoStrokes.length>0){let t=this.redoStrokes.pop();t&&(this.strokes.push(t),this.redrawCanvas())}}};var k=class extends f.Plugin{constructor(){super(...arguments);this.drawingApps=new Map}async onload(){this.registerMarkdownCodeBlockProcessor("pencil",async(e,s,n)=>{console.log("Creating new drawing instance");let o;if(e.trim())try{o=JSON.parse(e.trim()).drawingId||`drawing-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}catch(u){o=`drawing-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}else o=`drawing-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;let r=s.createDiv({cls:"drawing-container"});r.innerHTML=E,r.id=o,r.style.width="100%",r.style.height="500px",r.style.resize="none";let i=new ResizeObserver(u=>{for(let p of u){let g=p.contentRect.height,v=this.drawingApps.get(o);v&&v.updateContainerHeight(g)}});i.observe(r);let a=r.querySelector("#toolbar");a&&(a.style.display="none");let h=createEl("button",{cls:"tool-button edit-button",attr:{id:"edit-drawing",style:"position: absolute; top: 10px; right: 10px; z-index: 2;"}});h.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg>',r.appendChild(h);let l=createEl("button",{cls:"tool-button",attr:{id:"save-drawing",style:"position: absolute; top: 10px; right: 10px; z-index: 2; display: none;"}});l.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline></svg>',r.appendChild(l);let c=getComputedStyle(document.body),d=c.getPropertyValue("--background-primary"),x=c.getPropertyValue("--background-secondary"),b=c.getPropertyValue("--divider-color"),C=c.getPropertyValue("--text-normal");console.log("backgroundPrimary",d);let z={backgroundPrimary:d,backgroundSecondary:x,dividerColor:b,textColor:C};console.log("initColors",z);let L=async u=>{let p=this.app.vault.getAbstractFileByPath(n.sourcePath);if(p&&"path"in p)try{if(!(p instanceof f.TFile))return;let g=await this.app.vault.read(p),v=JSON.parse(u);v.drawingId=o;let y=JSON.stringify(v),D="```pencil\n```";if(g.includes(D)){let m=g.replace(D,`\`\`\`pencil
${y}
\`\`\``);await this.app.vault.modify(p,m),new f.Notice("Drawing saved to file");return}let T=(g.match(/```pencil[\s\S]*?```/g)||[]).find(m=>{try{return JSON.parse(m.replace(/```pencil\n|\n```/g,"")).drawingId===o}catch(M){return!1}});if(T){let m=g.replace(T,`\`\`\`pencil
${y}
\`\`\``);await this.app.vault.modify(p,m),new f.Notice("Drawing saved to file")}else console.error("Could not find matching code block")}catch(g){console.error("Failed to save drawing:",g),new f.Notice("Failed to save drawing")}};setTimeout(()=>{let u=new S(z,o,r);this.drawingApps.set(o,u);let p=r.querySelector(".undo"),g=r.querySelector(".redo"),v=r.querySelector(".toolbar");if(v&&(v.style.display="none"),p==null||p.addEventListener("click",()=>u.undo()),g==null||g.addEventListener("click",()=>u.redo()),e.trim())try{let y=JSON.parse(e.trim());u.loadFromData(JSON.stringify(y))}catch(y){console.error("Failed to parse drawing data:",y)}u.setEditMode(!1),h.addEventListener("click",()=>{v.style.display="flex",u.setEditMode(!0),h.style.display="none",l.style.display="block",r.style.resize="vertical"}),l.addEventListener("click",()=>{let y=u.getDrawingData();L(y),v.style.display="none",u.setEditMode(!1),l.style.display="none",h.style.display="block",r.style.resize="none"}),this.register(()=>i.disconnect())},0)})}onunload(){this.drawingApps.clear()}};
